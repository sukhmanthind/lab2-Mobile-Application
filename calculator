import tkinter as tk
from tkinter import messagebox
import os
import json

# File to store calculator state
STATE_FILE = "calculator_state.json"

def load_state():
    if os.path.exists(STATE_FILE):
        with open(STATE_FILE, "r") as file:
            return json.load(file)
    return {"value": "0"}

def save_state(value):
    with open(STATE_FILE, "w") as file:
        json.dump({"value": value}, file)

class Calculator:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Calculator")
        
        self.state = load_state()
        self.current_value = self.state["value"]
        self.expression = ""
        
        self.create_widgets()
    
    def create_widgets(self):
        self.display = tk.Entry(self.root, font=("Calibri", 20), bd=10, relief=tk.RIDGE, justify='right')
        self.display.grid(row=0, column=0, columnspan=4)
        self.display.insert(0, self.current_value)
        
        buttons = [
            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),
            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),
            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),
            ('CE', 4, 0), ('0', 4, 1), ('C', 4, 2), ('+', 4, 3)
        ]
        
        for (text, row, col) in buttons:
            button = tk.Button(self.root, text=text, font=("Calibri", 20), command=lambda t=text: self.on_button_click(t))
            button.grid(row=row, column=col, ipadx=20, ipady=20, sticky="nsew")
        
        equal_button = tk.Button(self.root, text='=', font=("Calibri", 20), command=self.calculate)
        equal_button.grid(row=5, column=0, columnspan=4, ipadx=20, ipady=20, sticky="nsew")
    
    def on_button_click(self, char):
        if char == 'C':
            self.expression = ""
            self.display.delete(0, tk.END)
            self.display.insert(0, "0")
        elif char == 'CE':
            self.expression = self.expression[:-1]
            self.display.delete(0, tk.END)
            self.display.insert(0, self.expression if self.expression else "0")
        else:
            self.expression += char
            self.display.delete(0, tk.END)
            self.display.insert(0, self.expression)
    
    def calculate(self):
        try:
            result = str(eval(self.expression))
            if len(result) > 8:
                result = "OVERFLOW"
            self.display.delete(0, tk.END)
            self.display.insert(0, result)
            self.expression = result if result != "OVERFLOW" else ""
            save_state(result if result != "OVERFLOW" else "0")
        except:
            self.display.delete(0, tk.END)
            self.display.insert(0, "ERROR")
            self.expression = ""
            save_state("0")

if __name__ == "__main__":
    root = tk.Tk()
    Calculator(root)
    root.mainloop()
